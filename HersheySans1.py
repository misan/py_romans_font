class HersheySans1:
    name = 'HersheySans1'
    is_monospace = False
    _units_per_em = 1000.0
    _ascent = 800.0
    _descent = -200.0
    _default_adv = 378.0
    _glyphs = {
        ' ': (378.000, []),
        '!': (315.000, [[(315.0, -662.0), (315.0, -220.0)], [(315.0, -63.0), (284.0, -31.5), (315.0, -0.0), (346.0, -31.5), (315.0, -63.0)]]),
        '"': (504.000, [[(220.0, -662.0), (220.0, -441.0)], [(472.0, -662.0), (472.0, -441.0)]]),
        '#': (662.000, [[(441.0, -788.0), (220.0, 220.0)], [(630.0, -788.0), (410.0, 220.0)], [(220.0, -378.0), (662.0, -378.0)], [(189.0, -189.0), (630.0, -189.0)]]),
        ': (630.000, [[(346.0, -788.0), (346.0, 126.0)], [(472.0, -788.0), (472.0, 126.0)], [(630.0, -567.0), (567.0, -630.0), (472.0, -662.0), (346.0, -662.0), (252.0, -630.0), (189.0, -567.0), (189.0, -504.0), (220.0, -441.0), (252.0, -410.0), (315.0, -378.0), (504.0, -315.0), (567.0, -284.0), (598.0, -252.0), (630.0, -189.0), (630.0, -94.5), (567.0, -31.5), (472.0, -0.0), (346.0, -0.0), (252.0, -31.5), (189.0, -94.5)]]),
        '%': (756.000, [[(756.0, -662.0), (189.0, -0.0)], [(346.0, -662.0), (410.0, -598.0), (410.0, -536.0), (378.0, -472.0), (315.0, -441.0), (252.0, -441.0), (189.0, -504.0), (189.0, -567.0), (220.0, -630.0), (284.0, -662.0), (346.0, -662.0), (410.0, -630.0), (504.0, -598.0), (598.0, -598.0), (693.0, -630.0), (756.0, -662.0)], [(630.0, -220.0), (567.0, -189.0), (536.0, -126.0), (536.0, -63.0), (598.0, -0.0), (662.0, -0.0), (724.0, -31.5), (756.0, -94.5), (756.0, -158.0), (693.0, -220.0), (630.0, -220.0)]]),
        '&': (819.000, [[(819.0, -378.0), (819.0, -410.0), (788.0, -441.0), (756.0, -441.0), (724.0, -410.0), (693.0, -346.0), (630.0, -189.0), (567.0, -94.5), (504.0, -31.5), (441.0, -0.0), (315.0, -0.0), (252.0, -31.5), (220.0, -63.0), (189.0, -126.0), (189.0, -189.0), (220.0, -252.0), (252.0, -284.0), (472.0, -410.0), (504.0, -441.0), (536.0, -504.0), (536.0, -567.0), (504.0, -630.0), (441.0, -662.0), (378.0, -630.0), (346.0, -567.0), (346.0, -504.0), (378.0, -410.0), (441.0, -315.0), (598.0, -94.5), (662.0, -31.5), (724.0, -0.0), (788.0, -0.0), (819.0, -31.5), (819.0, -63.0)]]),
        "'": (315.000, [[(252.0, -598.0), (220.0, -630.0), (252.0, -662.0), (284.0, -630.0), (284.0, -567.0), (252.0, -504.0), (220.0, -472.0)]]),
        '(': (441.000, [[(441.0, -788.0), (378.0, -724.0), (315.0, -630.0), (252.0, -504.0), (220.0, -346.0), (220.0, -220.0), (252.0, -63.0), (315.0, 63.0), (378.0, 158.0), (441.0, 220.0)]]),
        ')': (441.000, [[(189.0, -788.0), (252.0, -724.0), (315.0, -630.0), (378.0, -504.0), (410.0, -346.0), (410.0, -220.0), (378.0, -63.0), (315.0, 63.0), (252.0, 158.0), (189.0, 220.0)]]),
        '*': (504.000, [[(346.0, -472.0), (346.0, -94.5)], [(189.0, -378.0), (504.0, -189.0)], [(504.0, -378.0), (189.0, -189.0)]]),
        '+': (819.000, [[(504.0, -567.0), (504.0, -0.0)], [(220.0, -284.0), (788.0, -284.0)]]),
        ',': (252.000, [[(252.0, -126.0), (220.0, -94.5), (189.0, -126.0), (220.0, -158.0), (252.0, -126.0), (252.0, -63.0), (189.0, -0.0)]]),
        '-': (819.000, [[(220.0, -284.0), (788.0, -284.0)]]),
        '.': (252.000, [[(220.0, -158.0), (189.0, -126.0), (220.0, -94.5), (252.0, -126.0), (220.0, -158.0)]]),
        '/': (693.000, [[(724.0, -788.0), (158.0, 220.0)]]),
        '0': (630.000, [[(378.0, -662.0), (284.0, -630.0), (220.0, -536.0), (189.0, -378.0), (189.0, -284.0), (220.0, -126.0), (284.0, -31.5), (378.0, -0.0), (441.0, -0.0), (536.0, -31.5), (598.0, -126.0), (630.0, -284.0), (630.0, -378.0), (598.0, -536.0), (536.0, -630.0), (441.0, -662.0), (378.0, -662.0)]]),
        '1': (630.000, [[(284.0, -536.0), (346.0, -567.0), (441.0, -662.0), (441.0, -0.0)]]),
        '2': (630.000, [[(220.0, -504.0), (220.0, -536.0), (252.0, -598.0), (284.0, -630.0), (346.0, -662.0), (472.0, -662.0), (536.0, -630.0), (567.0, -598.0), (598.0, -536.0), (598.0, -472.0), (567.0, -410.0), (504.0, -315.0), (189.0, -0.0), (630.0, -0.0)]]),
        '3': (630.000, [[(252.0, -662.0), (598.0, -662.0), (410.0, -410.0), (504.0, -410.0), (567.0, -378.0), (598.0, -346.0), (630.0, -252.0), (630.0, -189.0), (598.0, -94.5), (536.0, -31.5), (441.0, -0.0), (346.0, -0.0), (252.0, -31.5), (220.0, -63.0), (189.0, -126.0)]]),
        '4': (630.000, [[(504.0, -662.0), (189.0, -220.0), (662.0, -220.0)], [(504.0, -662.0), (504.0, -0.0)]]),
        '5': (630.000, [[(567.0, -662.0), (252.0, -662.0), (220.0, -378.0), (252.0, -410.0), (346.0, -441.0), (441.0, -441.0), (536.0, -410.0), (598.0, -346.0), (630.0, -252.0), (630.0, -189.0), (598.0, -94.5), (536.0, -31.5), (441.0, -0.0), (346.0, -0.0), (252.0, -31.5), (220.0, -63.0), (189.0, -126.0)]]),
        '6': (630.000, [[(598.0, -567.0), (567.0, -630.0), (472.0, -662.0), (410.0, -662.0), (315.0, -630.0), (252.0, -536.0), (220.0, -378.0), (220.0, -220.0), (252.0, -94.5), (315.0, -31.5), (410.0, -0.0), (441.0, -0.0), (536.0, -31.5), (598.0, -94.5), (630.0, -189.0), (630.0, -220.0), (598.0, -315.0), (536.0, -378.0), (441.0, -410.0), (410.0, -410.0), (315.0, -378.0), (252.0, -315.0), (220.0, -220.0)]]),
        '7': (630.000, [[(630.0, -662.0), (315.0, -0.0)], [(189.0, -662.0), (630.0, -662.0)]]),
        '8': (630.000, [[(346.0, -662.0), (252.0, -630.0), (220.0, -567.0), (220.0, -504.0), (252.0, -441.0), (315.0, -410.0), (441.0, -378.0), (536.0, -346.0), (598.0, -284.0), (630.0, -220.0), (630.0, -126.0), (598.0, -63.0), (567.0, -31.5), (472.0, -0.0), (346.0, -0.0), (252.0, -31.5), (220.0, -63.0), (189.0, -126.0), (189.0, -220.0), (220.0, -284.0), (284.0, -346.0), (378.0, -378.0), (504.0, -410.0), (567.0, -441.0), (598.0, -504.0), (598.0, -567.0), (567.0, -630.0), (472.0, -662.0), (346.0, -662.0)]]),
        '9': (630.000, [[(598.0, -441.0), (567.0, -346.0), (504.0, -284.0), (410.0, -252.0), (378.0, -252.0), (284.0, -284.0), (220.0, -346.0), (189.0, -441.0), (189.0, -472.0), (220.0, -567.0), (284.0, -630.0), (378.0, -662.0), (410.0, -662.0), (504.0, -630.0), (567.0, -567.0), (598.0, -441.0), (598.0, -284.0), (567.0, -126.0), (504.0, -31.5), (410.0, -0.0), (346.0, -0.0), (252.0, -31.5), (220.0, -94.5)]]),
        ':': (252.000, [[(220.0, -378.0), (189.0, -346.0), (220.0, -315.0), (252.0, -346.0), (220.0, -378.0)], [(220.0, -158.0), (189.0, -126.0), (220.0, -94.5), (252.0, -126.0), (220.0, -158.0)]]),
        ';': (252.000, [[(220.0, -378.0), (189.0, -346.0), (220.0, -315.0), (252.0, -346.0), (220.0, -378.0)], [(252.0, -126.0), (220.0, -94.5), (189.0, -126.0), (220.0, -158.0), (252.0, -126.0), (252.0, -63.0), (189.0, -0.0)]]),
        '<': (756.000, [[(724.0, -567.0), (220.0, -284.0), (724.0, -0.0)]]),
        '=': (819.000, [[(220.0, -378.0), (788.0, -378.0)], [(220.0, -189.0), (788.0, -189.0)]]),
        '>': (756.000, [[(220.0, -567.0), (724.0, -284.0), (220.0, -0.0)]]),
        '?': (567.000, [[(189.0, -504.0), (189.0, -536.0), (220.0, -598.0), (252.0, -630.0), (315.0, -662.0), (441.0, -662.0), (504.0, -630.0), (536.0, -598.0), (567.0, -536.0), (567.0, -472.0), (536.0, -410.0), (504.0, -378.0), (378.0, -315.0), (378.0, -220.0)], [(378.0, -63.0), (346.0, -31.5), (378.0, -0.0), (410.0, -31.5), (378.0, -63.0)]]),
        '@': (850.000, [[(662.0, -410.0), (630.0, -472.0), (567.0, -504.0), (472.0, -504.0), (410.0, -472.0), (378.0, -441.0), (346.0, -346.0), (346.0, -252.0), (378.0, -189.0), (441.0, -158.0), (536.0, -158.0), (598.0, -189.0), (630.0, -252.0)], [(472.0, -504.0), (410.0, -441.0), (378.0, -346.0), (378.0, -252.0), (410.0, -189.0), (441.0, -158.0)], [(662.0, -504.0), (630.0, -252.0), (630.0, -189.0), (693.0, -158.0), (756.0, -158.0), (819.0, -220.0), (850.0, -315.0), (850.0, -378.0), (819.0, -472.0), (788.0, -536.0), (724.0, -598.0), (662.0, -630.0), (567.0, -662.0), (472.0, -662.0), (378.0, -630.0), (315.0, -598.0), (252.0, -536.0), (220.0, -472.0), (189.0, -378.0), (189.0, -284.0), (220.0, -189.0), (252.0, -126.0), (315.0, -63.0), (378.0, -31.5), (472.0, -0.0), (567.0, -0.0), (662.0, -31.5), (724.0, -63.0), (756.0, -94.5)], [(693.0, -504.0), (662.0, -252.0), (662.0, -189.0), (693.0, -158.0)]]),
        'A': (567.000, [[(378.0, -662.0), (126.0, -0.0)], [(378.0, -662.0), (630.0, -0.0)], [(220.0, -220.0), (536.0, -220.0)]]),
        'B': (662.000, [[(220.0, -662.0), (220.0, -0.0)], [(220.0, -662.0), (504.0, -662.0), (598.0, -630.0), (630.0, -598.0), (662.0, -536.0), (662.0, -472.0), (630.0, -410.0), (598.0, -378.0), (504.0, -346.0)], [(220.0, -346.0), (504.0, -346.0), (598.0, -315.0), (630.0, -284.0), (662.0, -220.0), (662.0, -126.0), (630.0, -63.0), (598.0, -31.5), (504.0, -0.0), (220.0, -0.0)]]),
        'C': (662.000, [[(662.0, -504.0), (630.0, -567.0), (567.0, -630.0), (504.0, -662.0), (378.0, -662.0), (315.0, -630.0), (252.0, -567.0), (220.0, -504.0), (189.0, -410.0), (189.0, -252.0), (220.0, -158.0), (252.0, -94.5), (315.0, -31.5), (378.0, -0.0), (504.0, -0.0), (567.0, -31.5), (630.0, -94.5), (662.0, -158.0)]]),
        'D': (662.000, [[(220.0, -662.0), (220.0, -0.0)], [(220.0, -662.0), (441.0, -662.0), (536.0, -630.0), (598.0, -567.0), (630.0, -504.0), (662.0, -410.0), (662.0, -252.0), (630.0, -158.0), (598.0, -94.5), (536.0, -31.5), (441.0, -0.0), (220.0, -0.0)]]),
        'E': (598.000, [[(220.0, -662.0), (220.0, -0.0)], [(220.0, -662.0), (630.0, -662.0)], [(220.0, -346.0), (472.0, -346.0)], [(220.0, -0.0), (630.0, -0.0)]]),
        'F': (567.000, [[(220.0, -662.0), (220.0, -0.0)], [(220.0, -662.0), (630.0, -662.0)], [(220.0, -346.0), (472.0, -346.0)]]),
        'G': (662.000, [[(662.0, -504.0), (630.0, -567.0), (567.0, -630.0), (504.0, -662.0), (378.0, -662.0), (315.0, -630.0), (252.0, -567.0), (220.0, -504.0), (189.0, -410.0), (189.0, -252.0), (220.0, -158.0), (252.0, -94.5), (315.0, -31.5), (378.0, -0.0), (504.0, -0.0), (567.0, -31.5), (630.0, -94.5), (662.0, -158.0), (662.0, -252.0)], [(504.0, -252.0), (662.0, -252.0)]]),
        'H': (693.000, [[(220.0, -662.0), (220.0, -0.0)], [(662.0, -662.0), (662.0, -0.0)], [(220.0, -346.0), (662.0, -346.0)]]),
        'I': (252.000, [[(220.0, -662.0), (220.0, -0.0)]]),
        'J': (504.000, [[(472.0, -662.0), (472.0, -158.0), (441.0, -63.0), (410.0, -31.5), (346.0, -0.0), (284.0, -0.0), (220.0, -31.5), (189.0, -63.0), (158.0, -158.0), (158.0, -220.0)]]),
        'K': (662.000, [[(220.0, -662.0), (220.0, -0.0)], [(662.0, -662.0), (220.0, -220.0)], [(378.0, -378.0), (662.0, -0.0)]]),
        'L': (536.000, [[(220.0, -662.0), (220.0, -0.0)], [(220.0, -0.0), (598.0, -0.0)]]),
        'M': (756.000, [[(220.0, -662.0), (220.0, -0.0)], [(220.0, -662.0), (472.0, -0.0)], [(724.0, -662.0), (472.0, -0.0)], [(724.0, -662.0), (724.0, -0.0)]]),
        'N': (693.000, [[(220.0, -662.0), (220.0, -0.0)], [(220.0, -662.0), (662.0, -0.0)], [(662.0, -662.0), (662.0, -0.0)]]),
        'O': (693.000, [[(378.0, -662.0), (315.0, -630.0), (252.0, -567.0), (220.0, -504.0), (189.0, -410.0), (189.0, -252.0), (220.0, -158.0), (252.0, -94.5), (315.0, -31.5), (378.0, -0.0), (504.0, -0.0), (567.0, -31.5), (630.0, -94.5), (662.0, -158.0), (693.0, -252.0), (693.0, -410.0), (662.0, -504.0), (630.0, -567.0), (567.0, -630.0), (504.0, -662.0), (378.0, -662.0)]]),
        'P': (662.000, [[(220.0, -662.0), (220.0, -0.0)], [(220.0, -662.0), (504.0, -662.0), (598.0, -630.0), (630.0, -598.0), (662.0, -536.0), (662.0, -441.0), (630.0, -378.0), (598.0, -346.0), (504.0, -315.0), (220.0, -315.0)]]),
        'Q': (693.000, [[(378.0, -662.0), (315.0, -630.0), (252.0, -567.0), (220.0, -504.0), (189.0, -410.0), (189.0, -252.0), (220.0, -158.0), (252.0, -94.5), (315.0, -31.5), (378.0, -0.0), (504.0, -0.0), (567.0, -31.5), (630.0, -94.5), (662.0, -158.0), (693.0, -252.0), (693.0, -410.0), (662.0, -504.0), (630.0, -567.0), (567.0, -630.0), (504.0, -662.0), (378.0, -662.0)], [(472.0, -126.0), (662.0, 63.0)]]),
        'R': (662.000, [[(220.0, -662.0), (220.0, -0.0)], [(220.0, -662.0), (504.0, -662.0), (598.0, -630.0), (630.0, -598.0), (662.0, -536.0), (662.0, -472.0), (630.0, -410.0), (598.0, -378.0), (504.0, -346.0), (220.0, -346.0)], [(441.0, -346.0), (662.0, -0.0)]]),
        'S': (630.000, [[(630.0, -567.0), (567.0, -630.0), (472.0, -662.0), (346.0, -662.0), (252.0, -630.0), (189.0, -567.0), (189.0, -504.0), (220.0, -441.0), (252.0, -410.0), (315.0, -378.0), (504.0, -315.0), (567.0, -284.0), (598.0, -252.0), (630.0, -189.0), (630.0, -94.5), (567.0, -31.5), (472.0, -0.0), (346.0, -0.0), (252.0, -31.5), (189.0, -94.5)]]),
        'T': (504.000, [[(346.0, -662.0), (346.0, -0.0)], [(126.0, -662.0), (567.0, -662.0)]]),
        'U': (693.000, [[(220.0, -662.0), (220.0, -189.0), (252.0, -94.5), (315.0, -31.5), (410.0, -0.0), (472.0, -0.0), (567.0, -31.5), (630.0, -94.5), (662.0, -189.0), (662.0, -662.0)]]),
        'V': (567.000, [[(126.0, -662.0), (378.0, -0.0)], [(630.0, -662.0), (378.0, -0.0)]]),
        'W': (756.000, [[(158.0, -662.0), (315.0, -0.0)], [(472.0, -662.0), (315.0, -0.0)], [(472.0, -662.0), (630.0, -0.0)], [(788.0, -662.0), (630.0, -0.0)]]),
        'X': (630.000, [[(189.0, -662.0), (630.0, -0.0)], [(630.0, -662.0), (189.0, -0.0)]]),
        'Y': (567.000, [[(126.0, -662.0), (378.0, -346.0), (378.0, -0.0)], [(630.0, -662.0), (378.0, -346.0)]]),
        'Z': (630.000, [[(630.0, -662.0), (189.0, -0.0)], [(189.0, -662.0), (630.0, -662.0)], [(189.0, -0.0), (630.0, -0.0)]]),
        # ... (rest of the glyphs)
    }
    _kern = {}

    def __init__(self):
        self.stroke_width = 1.0
        self.scale = 1.0 # Added scale attribute

    def _scale(self, px: int) -> float:
        return float(px) / self._units_per_em if self._units_per_em else 1.0

    def line_height(self, px: int) -> float:
        em_h = (self._ascent - self._descent) if (self._ascent or self._descent) else self._units_per_em
        return self._scale(px) * em_h * 1.2

    def glyph_strokes(self, ch: str, px: int):
        adv, pls = self._glyphs.get(ch, (self._default_adv, []))
        s = self._scale(px)
        return [[(x*s, y*s) for (x,y) in pl] for pl in pls]

    def advance(self, ch: str, px: int) -> float:
        adv, _ = self._glyphs.get(ch, (self._default_adv, []))
        return adv * self._scale(px)

    def measure(self, text: str, px: int) -> float:
        s = self._scale(px)
        return sum(self._glyphs.get(c, (self._default_adv, []))[0] for c in text) * s

    def measure_sequence(self, text: str, px: int) -> float:
        s = self._scale(px)
        total = 0.0
        prev = None
        for c in text:
            adv = self._glyphs.get(c, (self._default_adv, []))[0]
            if prev is not None:
                total += self._kern.get((prev, c), 0.0)
            total += adv
            prev = c
        return total * s

    def get_char(self, ch_code):
        # This method should return the raw glyph data, not scaled
        adv, pls = self._glyphs.get(ch_code, (self._default_adv, []))
        return pls

    def get_length(self, ch_code):
        adv, _ = self._glyphs.get(ch_code, (self._default_adv, []))
        return adv

    def get_string_length(self, line):
        return sum(self.get_length(ord(char)) for char in line)

    def get_string(self, line):
        x_offset = 0
        out = []
        for char in line:
            ch_code = ord(char)
            char_paths = self.get_char(ch_code)
            if char_paths:
                for path in char_paths:
                    # Apply font's internal scale and then add x_offset
                    new_path = [(p[0] * self.scale + x_offset, (p[1] - self._ascent) * self.scale) for p in path]
                    out.append(new_path)
            x_offset += self.get_length(ch_code) * self.scale
        return out

# Factory for adapter modules
def get_font():
    return HersheySans1()